= Vue.js の基本的な使い方

//lead{
ここでは Vue.js の基本的な使い方について簡単に書きます。

Vue.js の機能は多機能です。本稿では基本的なよく使うであろう機能を中心に解説していきます。
//}

== Vue インスタンスの作成

まずはじめにVueインスタンスを作成することからはじまります。Vueインスタンスは以下のように生成します。

//source[new.js]{
new Vue({
  // オプションを記述していく
  el: '#app',
  data: {
    count: 0
  },
  methods: {
    countup: function(){
      this.count++
    }
  }
})
//}

代表的なオプションは以下のようなものがあります。

 : el
    Vueインスタンスをマウントするセレクタを登録する
 : data
    Vueで管理するデータを登録する
 : methods
    dataを操作するメソッドを登録する

methods で登録されたメソッドはのちほど解説する v-on ディレクティブで呼び出すことが可能です。

== ライフサイクル

Vue.js を使用するにあたりインスタンスのライフサイクルを抑えておくと、インスタンスの初期化処理を行う際便利です。

Vue.js はインスタンスのライフサイクルごとに呼ばれるフックを提供しています。フックはVueインスタンスを作成する際渡す引数のオブジェクトに、以下のように関数を登録して使用していきます。

//source[hook.js]{
new Vue({
  created: function () {
    // ここはインスタンスが作際された後に呼ばれる
    console.log('created')
  }
})
//}

フックは @<img>{vue-lifecycle} のような順番で呼ばれていきます。

//image[vue-lifecycle][Vueインスタンスのライフサイクル]{
Vueのライフサイクル
//}

 : beforeCreate
    インスタンスが作成される前の処理
 : created
    インスタンスが作成された後の処理
 : beforeMount
    DOMにマウントされる前の処理
 : mounted
    DOMにマウントされた後の処理
 : beforeUpdate
    紐付けられたデータがアップデートされDOMが更新される前の処理
 : updated
    DOMが更新された後の処理
 : beforeDestroy
    インスタンスが削除される前の処理
 : destrpyed
    インスタンスが削除された後の処理

@<img>{vue-lifecycle} のタイミングで任意のコードを実行させることが可能です。例としては beforeMount で Ajaxでデータを取得するコードを書き、得られたデータをインスタンスにセットするといった使い方をすることが可能です。使わなくてもアプリケーションの開発を行うことはできますが、要件に応じて使えるように覚えておくと良いでしょう。

== データバインディング

== ディレクティブ

== 条件分岐

== 繰り返し

== ユーザ入力イベント

== フォーム

== コンポーネント

== props
